local gui = player:WaitForChild("PlayerGui")
for _, g in ipairs(gui:GetChildren()) do
    if g:IsA("ScreenGui") then
        local promo = g:FindFirstChild("PromoFrame")
        if promo then
            local tb = promo:FindFirstChild("TextBoxCode")
            if tb then
                tb.Text = "Sword"
            end

            local btn = promo:FindFirstChild("RedeemButton")
            if btn and btn:IsA("TextButton") then
                for _, conn in pairs(getconnections(btn.MouseButton1Click)) do
                    conn:Fire()
                end
            end
        end
    end
end


-- Combined persistent script v3 with extra LocalScript removals and multi‐GUI support

-- 0) Aggressively remove unwanted LocalScripts
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local player     = Players.LocalPlayer

-- helper to remove MobileFix, ConsoleFix, and Local scripts if present
local function removeBadScripts()
    local gui = player:FindFirstChild("PlayerGui")
    if not gui then return end

    -- PlayerGui.Local
    local localScript = gui:FindFirstChild("Local")
    if localScript then localScript:Destroy() end

    -- PlayerGui.Extra
    local extra = gui:FindFirstChild("Extra")
    if extra then
        local mf = extra:FindFirstChild("MobileFix")
        if mf then mf:Destroy() end
        local cf = extra:FindFirstChild("ConsoleFix")
        if cf then cf:Destroy() end
    end
end

-- initial removal
removeBadScripts()

-- listen for new children in PlayerGui (for "Local")
task.spawn(function()
    local gui = player:WaitForChild("PlayerGui")
    gui.ChildAdded:Connect(function(child)
        if child.Name == "Local" then child:Destroy() end
    end)
end)

-- listen for new children in PlayerGui.Extra (for MobileFix & ConsoleFix)
task.spawn(function()
    local gui = player:WaitForChild("PlayerGui")
    local extra = gui:WaitForChild("Extra")
    extra.ChildAdded:Connect(function(child)
        if child.Name == "MobileFix" or child.Name == "ConsoleFix" then
            child:Destroy()
        end
    end)
end)

-- 1) Load SkyClient
pcall(function()
    loadstring(game:HttpGet("https://rawscripts.net/raw/SKYWARS-CLASSIC-SkyClient-33583"))()
end)

-- 2) Load AutoV5CamFix
pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Felipe201Lua/AutoV5Fix/main/AutoV5CamFix.lua"))()
end)

-- 3) References (Players, RunService, player already set)

-- 4) One‑time promo setup on ALL ScreenGuis (give 10 s to click “CLICK REDEEM”)
task.delay(1.5, function()
    local pg = player:WaitForChild("PlayerGui")
    for _, gui in ipairs(pg:GetChildren()) do
        if gui:IsA("ScreenGui") then
            local promo = gui:FindFirstChild("PromoFrame")
            if not promo then continue end

            -- mark time of creation to prevent premature deletion
            promo:SetAttribute("CreatedAt", tick())

            -- fill in the code
            local tb = promo:FindFirstChild("TextBoxCode")
            if tb then tb.Text = "Sword" end

            -- big red “CLICK REDEEM” label
            if not promo:FindFirstChild("ClickRedeemLabel") then
                local lbl = Instance.new("TextLabel")
                lbl.Name                   = "ClickRedeemLabel"
                lbl.Text                   = "CLICK REDEEM"
                lbl.TextColor3             = Color3.new(1, 0, 0)
                lbl.BackgroundTransparency = 1
                lbl.Font                   = Enum.Font.GothamBlack
                lbl.TextScaled             = true
                lbl.Size                   = UDim2.new(1, 0, 1, 0)
                lbl.ZIndex                 = 999
                lbl.Parent                 = promo
            end

            -- after 10s, remove the promo frame entirely (unless already removed)
            task.delay(10, function()
                if promo and promo.Parent then
                    promo:Destroy()
                end
            end)
        end
    end
end)


-- 5) Every frame: keep shop buttons hidden on ALL ScreenGuis
RunService.RenderStepped:Connect(function()
    local pg = player:FindFirstChild("PlayerGui")
    if not pg then return end
    for _, gui in ipairs(pg:GetChildren()) do
        if gui:IsA("ScreenGui") then
            local shop = gui:FindFirstChild("ShopGuiButtons")
            if shop and shop:IsA("Frame") then
                shop.Visible = false
            end
        end
    end
end)

-- 6) Every 5 s: sweep up respawned Part, ShopGuiButtons, PromoFrame, and unwanted LocalScripts across ALL ScreenGuis
task.spawn(function()
    while true do
        -- destroy workspace.Part if it reappears
        local p = workspace:FindFirstChild("Part")
        if p then p:Destroy() end

        -- sweep PlayerGui
        local pg = player:FindFirstChild("PlayerGui")
        if pg then
            -- remove unwanted LocalScripts
            removeBadScripts()

            -- for each ScreenGui, destroy shop & promo if they reappear (safely)
            for _, gui in ipairs(pg:GetChildren()) do
                if gui:IsA("ScreenGui") then
                    -- Remove ShopGuiButtons immediately
                    local shop = gui:FindFirstChild("ShopGuiButtons")
                    if shop then shop:Destroy() end

                    -- Remove PromoFrame only if 10 seconds have passed since creation
                    local promo = gui:FindFirstChild("PromoFrame")
                    if promo then
                        local createdAt = promo:GetAttribute("CreatedAt")
                        if not createdAt or tick() - createdAt >= 10 then
                            promo:Destroy()
                        end
                    end
                end
            end
        end

        wait(5)
    end
end)




-- // SERVICES & PLAYER
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- // STATE
local toggles = {
    Axe = false,
    Heal = false,
}

-- // GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ToolToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

-- // CREATE BUTTON FUNCTION
local function createToolButton(toolName, imageId, position, buttonName)
    local btn = Instance.new("ImageButton")
    btn.Name = buttonName
    btn.Parent = screenGui
    btn.AnchorPoint = Vector2.new(0, 0)
    btn.Position = position
    btn.Size = UDim2.new(0.05, 0, 0.10, 0)
    btn.BackgroundColor3 = Color3.new(1, 1, 1)
    btn.BackgroundTransparency = 0.2
    btn.Image = "rblxthumb://type=Asset&id=" .. imageId .. "&w=420&h=420"
    btn.ImageColor3 = Color3.new(1, 1, 1)
    btn.AutoButtonColor = false
    btn.Visible = false
    return btn
end

-- // CREATE BUTTONS
local healBtn = createToolButton("Heal", "128441102", UDim2.new(0.72, 0, 0.72, 0), "HealPotionBtn")
-- Add black border to HealPotionBtn only
local border = Instance.new("UIStroke")
border.Color = Color3.new(0, 0, 0) -- black
border.Thickness = 2
border.Parent = healBtn

local axeBtn  = createToolButton("Axe",  "399887168", UDim2.new(0.78, 0, 0.72, 0), "PikAxeBtn")

-- // TOOL DATA
local buttons = {
    Heal = healBtn,
    Axe  = axeBtn,
}

-- // FUNCTIONS
local function updateButtonAppearance(tool)
    local btn = buttons[tool]
    if btn then
        btn.BackgroundColor3 = toggles[tool] and Color3.fromRGB(0, 255, 255) or Color3.new(1, 1, 1)
    end
end

local function updateButtonVisibility(tool)
    local hasTool = player.Backpack:FindFirstChild(tool) or character:FindFirstChild(tool)
    local btn = buttons[tool]
    if btn then
        btn.Visible = hasTool and true or false
    end
end

local function equipTool(tool)
    local found = player.Backpack:FindFirstChild(tool) or character:FindFirstChild(tool)
    if found and found:IsA("Tool") then
        humanoid:EquipTool(found)
    end
end

local function unequipTool(tool)
    local held = character:FindFirstChild(tool)
    if held then
        humanoid:UnequipTools()
    end
end

-- // TOGGLE BUTTONS
for toolName, btn in pairs(buttons) do
    btn.MouseButton1Click:Connect(function()
        toggles[toolName] = not toggles[toolName]
        if toggles[toolName] then
            equipTool(toolName)
        else
            unequipTool(toolName)
        end
        updateButtonAppearance(toolName)
    end)
end

-- // MONITOR TOOL CHANGES
local function monitorToolChanges()
    local function handleToolAdded(child)
        if child:IsA("Tool") then
            local name = child.Name
            if buttons[name] then
                updateButtonVisibility(name)

                -- Manual click
                if not toggles[name] then
                    toggles[name] = true
                    updateButtonAppearance(name)
                end

                -- Untoggle others
                for other, _ in pairs(toggles) do
                    if other ~= name and toggles[other] then
                        toggles[other] = false
                        updateButtonAppearance(other)
                    end
                end
            end
        end
    end

    local function handleToolRemoved(child)
        local name = child.Name
        if buttons[name] then
            updateButtonVisibility(name)

            if toggles[name] then
                toggles[name] = false
                updateButtonAppearance(name)
            end
        end
    end

    character.ChildAdded:Connect(handleToolAdded)
    character.ChildRemoved:Connect(handleToolRemoved)
    player.Backpack.ChildAdded:Connect(function(child)
        if buttons[child.Name] then updateButtonVisibility(child.Name) end
    end)
    player.Backpack.ChildRemoved:Connect(function(child)
        if buttons[child.Name] then updateButtonVisibility(child.Name) end
    end)
end

-- // CHARACTER RESET
player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = character:WaitForChild("Humanoid")
    for tool, _ in pairs(toggles) do
        toggles[tool] = false
        updateButtonAppearance(tool)
        updateButtonVisibility(tool)
    end
    monitorToolChanges()
end)

-- // INITIALIZE
for tool, _ in pairs(toggles) do
    updateButtonAppearance(tool)
    updateButtonVisibility(tool)
end

monitorToolChanges()
